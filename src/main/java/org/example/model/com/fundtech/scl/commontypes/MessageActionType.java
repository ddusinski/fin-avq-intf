//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2025.07.28 at 09:00:52 PM CEST 
//


package org.example.model.com.fundtech.scl.commontypes;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MessageActionType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="MessageActionType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="ValidatePaymentFromTemplate"/&gt;
 *     &lt;enumeration value="Validate"/&gt;
 *     &lt;enumeration value="ValidateTemplate"/&gt;
 *     &lt;enumeration value="Save"/&gt;
 *     &lt;enumeration value="Submit"/&gt;
 *     &lt;enumeration value="SpawnRelated"/&gt;
 *     &lt;enumeration value="CreateTemplate"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "MessageActionType")
@XmlEnum
public enum MessageActionType {

    @XmlEnumValue("ValidatePaymentFromTemplate")
    VALIDATE_PAYMENT_FROM_TEMPLATE("ValidatePaymentFromTemplate"),
    @XmlEnumValue("Validate")
    VALIDATE("Validate"),
    @XmlEnumValue("ValidateTemplate")
    VALIDATE_TEMPLATE("ValidateTemplate"),
    @XmlEnumValue("Save")
    SAVE("Save"),
    @XmlEnumValue("Submit")
    SUBMIT("Submit"),
    @XmlEnumValue("SpawnRelated")
    SPAWN_RELATED("SpawnRelated"),
    @XmlEnumValue("CreateTemplate")
    CREATE_TEMPLATE("CreateTemplate");
    private final String value;

    MessageActionType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MessageActionType fromValue(String v) {
        for (MessageActionType c: MessageActionType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
